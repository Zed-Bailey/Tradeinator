@page "/events"
@using Tradeinator.Dashboard.Data
@using Microsoft.FluentUI.AspNetCore.Components;

@inject IToastService ToastService
@inject EventService eventService
@implements IDisposable

<PageTitle>Events</PageTitle>

<h1>Recent Exchange Events</h1>

<div class="flex-column mt-2">
    <h4 class="mb-0">@eventService.ExchangeName</h4>
    <p>@eventService.Host</p>
</div>


<FluentDataGrid Items="@FilteredItems" ItemKey="@(p => p.Key)" Pagination="@pagination">
    
    <PropertyColumn Property="@(e => e.Time)" Sortable="true" />
    <PropertyColumn Property="@(p => p.Topic)" Sortable="true">
        <ColumnOptions>
            <div class="search-box">
                <FluentSearch type="search" Autofocus="true" @bind-Value="topicFilter" @oninput="HandleTopicFilter" @bind-Value:after="HandleClear" Placeholder="Event topic..." />
            </div>
        </ColumnOptions>
    </PropertyColumn>
    <PropertyColumn Property="@(p => p.Body)" Class="multiline-text" />
</FluentDataGrid>

<FluentPaginator State="@pagination" />

@code {
    
    
    string topicFilter = string.Empty;
    
    List<ExchangeEvent>? ExchangeEvents;
    IQueryable<ExchangeEvent>? FilteredItems => ExchangeEvents?.AsQueryable().Where(x => x.Topic.Contains(topicFilter, StringComparison.InvariantCultureIgnoreCase));
        
    PaginationState pagination = new PaginationState { ItemsPerPage = 10 };
    protected override void OnInitialized()
    {
        base.OnInitialized();
        if (!eventService.Connected)
        {
            ToastService.ShowError(eventService.FailedConnectionMessage);
            return;
        }

        ExchangeEvents = eventService.ExchangeEvents;
        eventService.NewDataReceived += EventsChanged;
    }
    
    public void Dispose()
    {
        eventService.NewDataReceived -= EventsChanged;
    }
    
    async void EventsChanged(object? sender, EventArgs e)
    {
        await InvokeAsync(StateHasChanged);
    }
    
    private void HandleTopicFilter(ChangeEventArgs args)
    {
        if (args.Value is string value)
        {
            topicFilter = value;
        }
    }

    private void HandleClear()
    {
        if (string.IsNullOrWhiteSpace(topicFilter))
        {
            topicFilter = string.Empty;
        }
    }

}