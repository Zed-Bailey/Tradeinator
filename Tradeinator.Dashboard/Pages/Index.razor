@page "/"
@using Microsoft.FluentUI.AspNetCore.Components
@using GeriRemenyi.Oanda.V20.Client.Model
@using GeriRemenyi.Oanda.V20.Sdk
@using GeriRemenyi.Oanda.V20.Sdk.Common.Types
@using GeriRemenyi.Oanda.V20.Client.Client
@inject IConfiguration Config


<PageTitle>Index</PageTitle>

<FluentLabel Typo="Typography.H1">
    Hello Zed
</FluentLabel>
<p>Latest strategy insights</p>

<FluentGrid Justify="JustifyContent.FlexStart" Spacing="2">

    <FluentGridItem xs="12" sm="6">
        <FluentCard>
            <h4>Currently running {N} strategies</h4>
            <p>Top Performers</p>
            <ul class="">
                <li>
                    <FluentAnchor Href="#" IconEnd="@(new Icons.Regular.Size24.ArrowRight())">
                        Strategy n
                    </FluentAnchor>
                </li>

                <li>
                    <FluentAnchor Href="#" IconEnd="@(new Icons.Regular.Size24.ArrowRight())">
                        Strategy n
                    </FluentAnchor>
                </li>
                <li>
                    <FluentAnchor Href="#" IconEnd="@(new Icons.Regular.Size24.ArrowRight())">
                        Strategy n
                    </FluentAnchor>
                </li>
                <li>
                    <FluentAnchor Href="#" IconEnd="@(new Icons.Regular.Size24.ArrowRight())">
                        Strategy n
                    </FluentAnchor>
                </li>
            </ul>
        </FluentCard>
    </FluentGridItem>

    <FluentGridItem xs="12" sm="6">
        <FluentCard>
            hello
        </FluentCard>
    </FluentGridItem>

    <FluentGridItem xs="12">
        <FluentCard>
            <h4>View latest currency prices</h4>
            
            <FluentStack>
                <FluentSelect Appearance="Appearance.Filled" Position="SelectPosition.Below" Id="currencySelect" name="currencySelect" ValueChanged="@(e => OnInstrumentChange(e))" TOption="string" Height="300px">
                    @foreach (var currency in instruments)
                    {
                        <FluentOption Value="@currency">@(currency.Replace("_", "/"))</FluentOption>
                    }
                </FluentSelect>
                <FluentSelect Appearance="Appearance.Filled" Position="SelectPosition.Below" Id="granularitySelect" name="currencySelect" ValueChanged="@(e => OnGranularityChange(e))" TOption="string" Height="300px">
                    @foreach (var granularity in granularities)
                    {
                        <FluentOption Value="@granularity" Selected="@(granularity == selectedGranularityValue)">@granularity</FluentOption>
                    }
                </FluentSelect>
                
            </FluentStack>
            
            

            @if (!string.IsNullOrEmpty(candleError))
            {
                <p class="text-danger">@candleError</p>
            }
            @* ant design chart *@
            <Line Data="candles" Config="config" @ref="lineChart"/>
            
        </FluentCard>
    </FluentGridItem>
    
    
</FluentGrid>

@code {
    IChartComponent? lineChart;

    LineConfig config = new LineConfig()
    {
        Title = new Title()
        {
            Visible = true,
            Text = "Line Graph",
        },
        Description = new Description()
        {
            Visible = true,
            Text = "Replace broken lines with smooth curves。",
        },
        Padding = "auto",
        AutoFit = true,
        XField = "time",
        YField = "price",
        StepType = "middle",
        YAxis = new ValueAxis
        {
            Nice = true,
        }
        
    };
    
    string[] instruments = Enum.GetNames(typeof(InstrumentName));
    string[] granularities = Enum.GetNames(typeof(CandlestickGranularity));
    string selectedInstrumentValue = "";
    string selectedGranularityValue = "H1";
    
    IOandaApiConnection? connection;
    string? candleError = null;
    dynamic[] candles;

    Task OnInstrumentChange(string value)
    {
        selectedInstrumentValue = value;
        return GetCandleData();
    }

    Task OnGranularityChange(string value)
    {
        selectedGranularityValue = value;
        return GetCandleData();
    }
    
    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        selectedInstrumentValue = instruments[0];
        var token = Config["OANDA_API_TOKEN"];
       
        var server = OandaConnectionType.FxPractice;
        connection = new OandaApiConnectionFactory().CreateConnection(server, token);
        
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);
        if (firstRender)
        {
            await GetCandleData();
        }
    }

    async Task GetCandleData()
    {
        try
        {
            var candlesResponse = await connection.InstrumentApi.GetInstrumentCandlesAsync(
                Enum.Parse<InstrumentName>(selectedInstrumentValue),
                DateTimeFormat.RFC3339,
                granularity: Enum.Parse<CandlestickGranularity>(selectedGranularityValue),
                count: 200
            );
            candles = candlesResponse.Candles
                .Select(x => new
                {
                    price = double.Round((x.Mid.O + x.Mid.H + x.Mid.L + x.Mid.C) / 4d, 5),
                    time = DateTime.Parse(x.Time).ToString("g")
                })
                .ToArray();
            
            // update the charts scales
            double min = candles.Min(x => x.price);
            double max = candles.Max(x => x.price);
            config.YAxis.Min = min;
            config.YAxis.Max = max;
            // update chart with new config and data
            await lineChart?.UpdateChart(config, data: candles);
        }
        catch (ApiException e)
        {
            candleError = e.Message;
        }
    }

}