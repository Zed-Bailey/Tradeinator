@page "/broker/oanda"
@using GeriRemenyi.Oanda.V20.Client.Client
@using GeriRemenyi.Oanda.V20.Client.Model
@using GeriRemenyi.Oanda.V20.Sdk
@using GeriRemenyi.Oanda.V20.Sdk.Common.Types
@using Microsoft.FluentUI.AspNetCore.Components

@inject IConfiguration Config
@inject IDialogService dialogService

<h3>Oanda account overview</h3>

@if (isLoading && !isError)
{
    <FluentProgressRing Value="null"/>
}

@if (isError)
{
    <p>Error</p>
}

@if (!isLoading)
{ 
    <FluentButton IconStart="@(new Icons.Filled.Size24.ArrowDownload())" Appearance="Appearance.Stealth">Refresh Accounts</FluentButton>
    
    <FluentDivider Orientation="Orientation.Horizontal"/>
    <div class="my-2">
        <FluentLabel Typo="Typography.Subject">Total P/L : $ @(accountSummaries.Sum(x => x.Pl))</FluentLabel>
        <FluentLabel Typo="Typography.Subject">Total Commission : $ @(accountSummaries.Sum(x => x.Commission))</FluentLabel>
    </div>
    
    
    <FluentDivider Orientation="Orientation.Horizontal"/>
    
    <FluentGrid Class="mt-3">
        @foreach (var acc in accountSummaries)
        {
            
            <FluentGridItem sm="12" md="6" xl="3">
                <FluentCard >
                    <FluentLabel Typo="Typography.H3">@acc.Alias</FluentLabel>
                    <FluentLabel Typo="Typography.Subject" Class="fw-light">@acc.Id</FluentLabel>
                    <FluentLabel Typo="Typography.H4" Weight="FontWeight.Bold">$ @acc.Balance</FluentLabel>

                    <FluentAnchor Appearance="Appearance.Lightweight" Href="@($"/broker/oanda/{acc.Id}")" Class="w-100" IconEnd="@(new Icons.Filled.Size16.ArrowRight())">
                        View Account
                    </FluentAnchor>
                </FluentCard>
                
            </FluentGridItem>
        }
        
        
    </FluentGrid>
}


@code {
    bool isError = false;
    bool isLoading = true;
    IOandaApiConnection? connection;

    IEnumerable<AccountProperties> currentAccounts = new List<AccountProperties>();
    List<AccountSummary> accountSummaries = new();
    
    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        
        var token = Config["OANDA_API_TOKEN"];
        if (string.IsNullOrEmpty(token))
        {
            await dialogService.ShowErrorAsync("Oanda api token was not found in configuration", "Token Error");
            isError = true;
            
        }
        else
        {
            connection = new OandaApiConnection(OandaConnectionType.FxPractice, token);
            
            var c = connection.GetAccounts().OrderBy(x => x.Id);
            foreach (var a in c)
            {
                try
                {
                    var summary = await connection.GetAccount(a.Id).GetSummaryAsync();
                    accountSummaries.Add(summary);
                }
                catch (ApiException e)
                {
                    Console.WriteLine(e);
                    Console.WriteLine($"failed to get summary for account: {a.Id}");
                }
                    
            }
        }
        
        
        
        //
        isLoading = false;
        
    }
    

}